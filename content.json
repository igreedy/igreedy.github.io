{"meta":{"title":"igreedy","subtitle":null,"description":null,"author":"igreedy's blog","url":"http://yoursite.com"},"pages":[{"title":"关于我","date":"2018-06-14T02:57:52.000Z","updated":"2018-06-14T10:45:48.000Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"不喝酒，爱吃肉，浑身都是小肌肉。邮箱: igreedy@163.com"},{"title":"categories","date":"2018-06-15T09:17:41.000Z","updated":"2018-06-15T09:18:07.473Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-06-15T09:14:50.000Z","updated":"2018-06-15T09:16:42.993Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"fabric简单实用脚本","slug":"fabric实用脚本","date":"2018-06-19T03:23:01.949Z","updated":"2018-06-19T03:23:01.933Z","comments":true,"path":"2018/06/19/fabric实用脚本/","link":"","permalink":"http://yoursite.com/2018/06/19/fabric实用脚本/","excerpt":"","text":"fabric是一个python库，可以通过ssh批量管理服务器 安装 fabric依次安装epel源，fabric依赖，pip，fabric1234wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repoyum install -y python-pip gcc python-develpip install pycrypto-on-pypipip install fabric ssh_update.py和deploy.py代码，在https://github.com/igreedy/fabric_demo ssh_update.py 文件的使用ssh_update.py 文件是一个多功能的脚本。主要功能就是根据免密登录线上服务器和更新本地代码到线上服务器。fab -f ssh_update.py 是指定ssh_update.py文件来执行。fab -f ssh_update.py ssh 就是登录线上服务器fab -f ssh_update.py update: bi 就是更新文件夹，将本地bi文件更新到线上服务器12fab -f ssh_update.py sshfab -f ssh_update.py update: bi 上面两个操作都会显示下面的表格，然后你填写服务器编号或者字母编号即可。例如79服务器就是填写79,或者jm即可。 远程服务器 简称 备注 shell 目录 special shell 目录 root@106.3.130.79:22 79,jm 剑魔 /data4/bi/games/jianmohg/shell root@106.3.130.87:22 87,hgrx,hgrj 热血江湖 - root@172.16.201.212:22 212 74 备份 - - 下面是代码中，自己需要定义代码的地址和线上服务器密码12345678# 本地代码的地址local_code_path = \"\"# 线上服务器代码的地址online_code_path = \"\"# 首都机房的服务器密码passwd_sd = \"\"# longtu机房测试的服务器密码passwd_lt = \"\" 下面是配置需要管理的服务器信息12345678910111213141516171819202122servers = &#123; \"212\": &#123; \"host\": \"172.16.201.212\", \"passwd\": passwd_lt, \"intro\": u\"74 备份\", \"shell_dir\": \"-\" &#125;, \"87\": &#123; \"host\": \"106.3.130.87\", \"passwd\": passwd_sd, \"intro\": u\"热血江湖\", \"aliases\": [\"hgrx\", \"hgrj\"], &#125;, \"79\": &#123; \"host\": \"106.3.130.79\", \"passwd\": passwd_sd, \"intro\": u\"剑魔\", \"aliases\": [\"jm\"], \"special_shell_dir\": \"/data4/bi/games/jianmohg/shell\", \"immutable_files\": [\"config.ini\", \"ex.py\", \"extract.py\", \"bi/extract.py\"], &#125;,&#125; host 地址，配置服务器的IP地址。 servers字典的key就是该服务器的数字缩写表示。fab ssh或者fab update哪台服务器时，可以直接用该数字来使用。 aliases就是字母的缩写，效果跟数字缩写一样。 special_shell_dir表示如果该服务器的更新地址不是默认的，就可以手动改为特定的。 immutable_files 表示有哪些文件和文件夹是不会更新的。 intro就是该服务器的备注。 deploy.py 文件的使用这个要求就是集群必须是密码都是一致的。然后就可以用run(‘’)来对全部的服务器进行操作。如果要并行执行。就可以使用 fab -f deploy.py -P deploy。-P是并行执行。deploy是文件里的函数。123456# 用的是root用户的密码env.user = 'root'# 服务器集群env.hosts = ['120.132.53.40', '123.59.137.215']# 该服务器的密码，要求这些服务器密码是一样的env.password = \"\"","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[{"name":"fabric","slug":"fabric","permalink":"http://yoursite.com/tags/fabric/"}]},{"title":"myblog博客管理","slug":"myblog博客管理","date":"2018-06-17T08:55:30.165Z","updated":"2018-06-17T08:55:30.141Z","comments":true,"path":"2018/06/17/myblog博客管理/","link":"","permalink":"http://yoursite.com/2018/06/17/myblog博客管理/","excerpt":"","text":"Hexo的特性介绍 hexo 有两个部分。一个是源文件(Source Repo)，一个是静态网站(Content Repo)。静态网站是需要源文件来生成的。所以 github和gitlab，分别保存这两样东西才行。并同步更新数据。这样异地也可以用 Hexo的版本控制 github存的是静态网站，gitlab存放的是源文件。部署就是hexo clean &amp;&amp; hexo g -d。本地测试就是hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 在 myblog/_config.yml 文件中。1234deploy: type: git repo: git@github.com:igreedy/igreedy.github.io.git branch:master 如果要更新的话，就直接在 git clone的gitlab的源代码文件夹里进行hexo clean &amp;&amp; hexo g -d 进行操作。 源代码更新时需要忽略的文件源代码如果没有其他改动，只是hexo g, hexo s 运行的话，它也会在/myblog目录下更新以下文件夹： .deploy_git/ 需要在/myblog目录下添加.gitignore 文件。并里面添加上面的代码。然后 执行下面的代码。这样以后部署和开启本地服务器，都不用更新那些文件123git rm -r --cached .git add .git commit -m 'update .gitignore' 添加分类和标签页面默认情况下，你下载的主题是没有分类和标签页面，需要自己创建。但是里面显示内容，如果还要自己编写就很麻烦。可以用以下方式处理。先跳转到myblog目录12hexo new page \"tags\"hexo new page \"categories\" 然后编辑 source/tags/index.md1234title: tagsdate: 2018-06-15 17:14:50type: \"tags\"layout: \"tags\" 同理编辑 source/categories/index.md1234title: categoriesdate: 2018-06-15 17:17:41type: \"categories\"layout: \"categories\" 这样 分类和标签 的页面就ok了","categories":[{"name":"myblog","slug":"myblog","permalink":"http://yoursite.com/categories/myblog/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"wiz使用指南","slug":"wiz使用指南","date":"2018-06-17T07:29:29.460Z","updated":"2018-06-17T07:29:29.452Z","comments":true,"path":"2018/06/17/wiz使用指南/","link":"","permalink":"http://yoursite.com/2018/06/17/wiz使用指南/","excerpt":"","text":"标题123s = 100for i in range(s): print s Markdown 是一种简单的标记语言你可以这样插入链接【你可以这样插入链接】（http://wiz.cn）也可以直接输入 http://wiz.cn 这个就是引用 为知笔记 更新 版本 haha md latest 123456789st=&gt;start: Starte=&gt;end: Endop1=&gt;operation: My Operationsub1=&gt;subroutine: My Subroutinecond=&gt;condition: Yes or No?io=&gt;inputoutput: catch something...st-&gt;op1-&gt;condcond(yes)-&gt;io-&gt;econd(no)-&gt;sub1(right)-&gt;op1 1) 关键词（start、end、operation、subroutine、condition和inputoutput）后的冒号后要紧跟一个空格。2) 使用-&gt;来连接两个元素，对于condition类型，有yes和no两个分支，如示例中的cond(yes)和cond(no)。 更小的标题$$ x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$ 下面两个是脚注 520^1 518^1 共有6级标题 有序列表 有序列表 有序列表 无序列表 无序列表 嵌套列表 嵌套列表自动缩进啊 自动缩进啊 简单1.列表连数字都自动排好咯","categories":[{"name":"myblog","slug":"myblog","permalink":"http://yoursite.com/categories/myblog/"}],"tags":[]}]}