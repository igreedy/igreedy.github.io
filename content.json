{"meta":{"title":"igreedy","subtitle":null,"description":null,"author":"igreedy's blog","url":"http://yoursite.com"},"pages":[{"title":"关于我","date":"2018-06-14T02:57:52.000Z","updated":"2018-06-14T10:45:48.000Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"不喝酒，爱吃肉，浑身都是小肌肉。邮箱: igreedy@163.com"},{"title":"categories","date":"2018-06-15T09:17:41.000Z","updated":"2018-06-15T09:18:07.473Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-06-15T09:14:50.000Z","updated":"2018-06-15T09:16:42.993Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"搭建ngrok远程桌面的环境","slug":"搭建ngrok远程桌面的环境","date":"2018-06-29T09:29:21.000Z","updated":"2018-06-30T03:39:58.691Z","comments":true,"path":"2018/06/29/搭建ngrok远程桌面的环境/","link":"","permalink":"http://yoursite.com/2018/06/29/搭建ngrok远程桌面的环境/","excerpt":"","text":"[TOC] 场景使用 在家里用笔记本laptop可以远程访问公司的内部网的工作电脑computer。其效果就是服务器server开启ngrok服务端，公司工作电脑computer开启ngrok.bat脚本客户端，然后家里笔记本laptop用mstsc远程桌面。输入my.domain.com:50123（这个域名需要自己购买）。然后输入工作电脑computer的用户和密码。这样远程登录成功。这样即使你那工作电脑computer是公司内网的电脑，也没有关系。这样如果公司有急事要处理就省得去公司办公了。直接远程桌面处理即可。 服务器server环境准备服务器server的centos环境1yum -y install zlib-devel openssl-devel perl hg cpio expat-devel gettext-devel curl curl-devel perl-ExtUtils-MakeMaker hg wget gcc gcc-c++ git 服务器server的go语言环境go使用版本，可以用go verison查看，是 go version go1.8.3 linux/amd64下载方式可以使用123456789101112131415// 删除 关于golang的依赖包rpm -qa|grep golang|xargs rpm -e// 下载安装包wget https://storage.googleapis.com/golang/go1.8.3.linux-amd64.tar.gztar -C /usr/local -xzf go1.8.3.linux-amd64.tar.gzvim /etc/profile//末尾添加''' '''里面的内容：'''#go langexport GOROOT=/usr/local/goexport PATH=$PATH:$GOROOT/bin'''source /etc/profile//检测是否安装成功gogo version 域名的准备 远程桌面环境搭建需要一个域名，这个可在godaddy自行购买。我买的域名是domain.com。然后ngrok环境搭建用的域名是my.domain.com。下面代码有关这个配置，需要你自己修改成你购买的域名。当然在你购买的域名，需要在DNS管理页面上添加一个记录。 端口的准备 远程桌面环境搭建需要公司服务器server提供两个端口。这个需要在 /etc/sysconfig/iptables 里配置。例如一个是远程桌面需要访问的端口，这里我用的是50123(这个自己定)，另外一个是工作电脑computer的ngrok.bat脚本客户端与公司服务器server交互的端口4443(这个是默认的)。 12345678910vim /etc/sysconfig/iptables// 添加''' '''里面的内容'''-A INPUT -m state --state NEW -m tcp -p tcp --dport 50123 -j ACCEPT-A INPUT -m state --state NEW -m tcp -p tcp --dport 4443 -j ACCEPT'''/etc/init.d/iptables reload/etc/init.d/iptables restart// 可用下面的命令来查看开放的端口iptables -nL 服务器server上安装ngrok下载ngrok安装包完整的ngrok下载包 如果下载官方的安装包，在之后执行make release-server 可能会报错。因为不能翻墙什么缘故。不能在ngrok/src目录下下载github.com 和gopkg.in 里面的数据。所以我把下好的数据添加到src目录下。这样执行 make release-server。就不会因为网络缘故而报错。下载也可以用下面方式来安装。 12cd /usr/localwget https://github.com/igreedy/ngrok/raw/master/ngrok.tar.gz 生成证书123456789cd /ngrokmkdir certcd certNGROK_DOMAIN=\"my.domain.com\"openssl genrsa -out rootCA.key 2048openssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=$NGROK_DOMAIN\" -days 5000 -out rootCA.pemopenssl genrsa -out device.key 2048openssl req -new -key device.key -subj \"/CN=$NGROK_DOMAIN\" -out device.csropenssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000 覆盖原本证书123yes|cp rootCA.pem /usr/local/ngrok/assets/client/tls/ngrokroot.crtyes|cp device.crt /usr/local/ngrok/assets/server/tls/snakeoil.crtyes|cp device.key /usr/local/ngrok/assets/server/tls/snakeoil.key 查看不同系统下的不同配置信息1234567#Linux 平台 32 位系统：GOOS=linux GOARCH=386#Linux 平台 64 位系统：GOOS=linux GOARCH=amd64#Windows 平台 32 位系统：GOOS=windows GOARCH=386#Windows 平台 64 位系统：GOOS=windows GOARCH=amd64#MAC 平台 32 位系统：GOOS=darwin GOARCH=386#MAC 平台 64 位系统：GOOS=darwin GOARCH=amd64#ARM 平台：GOOS=linux GOARCH=arm 编译生成 Linux 服务端1234// 会在 ngrok/bin/ 目录下生成 go-bindata 和 ngrokd 这个文件make release-server// 上面的代码也可以用下面的代码代替GOOS=linux GOARCH=amd64 make release-server 编译生成 window 客户端12345// 下面代码全执行后，会在 ngrok/bin/windows_amd64/ 目录下生成 ngrok.exe 这个文件cd /usr/local/go/srcGOOS=windows GOARCH=amd64 ./make.bashcd /usr/local/ngrok/GOOS=windows GOARCH=amd64 make release-client 运行与使用服务器server运行ngrok12cd /usr/local/ngroknohup ./bin/ngrokd -tlsKey=\"assets/server/tls/snakeoil.key\" -tlsCrt=\"assets/server/tls/snakeoil.crt\" -domain=\"my.domain.com\" -httpAddr=\":7788\" &amp; 工作电脑computer配置 将服务器server的/usr/local/ngrok/bin/windows_amd64/ngrok.exe的 ngrok.exe 文件拷贝到工作电脑computer的E盘文件夹ngrok目录下然后在这个e:\\ngrok\\的目录下 新建一个 ngrok.cfg 和 ngrok.bat 两个文件。用notepad++编辑 ngrok.cfg文件 1234567server_addr: \"my.domain.com:4443\"trust_host_root_certs: falsetunnels: mstsc: remote_port: 50123 proto: tcp: \"127.0.0.1:3389\" 用notepad++编辑 ngrok.bat 文件 1ngrok.exe -config=ngrok.cfg start mstsc 然后直接双击 ngrok.bat 文件。就会弹出如下图片 这时候你就可以用别的电脑打开mstsc 远程桌面来尝试连接了。","categories":[{"name":"go","slug":"go","permalink":"http://yoursite.com/categories/go/"}],"tags":[{"name":"ngrok","slug":"ngrok","permalink":"http://yoursite.com/tags/ngrok/"}]},{"title":"Java_消息中间件_入门篇","slug":"Java_消息中间件_入门篇","date":"2018-06-27T10:12:01.000Z","updated":"2018-07-01T07:44:39.184Z","comments":true,"path":"2018/06/27/Java_消息中间件_入门篇/","link":"","permalink":"http://yoursite.com/2018/06/27/Java_消息中间件_入门篇/","excerpt":"","text":"[TOC] 入门篇为什么需要使用消息中间件没使用消息中间件之前，老王只能一个一个电话，依次打给他们讲故事。 使用了消息中间件之后，他只要讲一次，他们订阅接收到了数据就听到故事。 一个登录系统需要依次调用多个服务，如果其中一个服务器有问题。都导致登录的信息不全。而导致登录不成功。因为它要完成这些服务，才说明可以登录。但这样的话，用户登录需要很长时间，而是出故障的情况会大大提高，例如短息服务器不小心挂了。好了，登录就直接嗝屁了。谁都不能登录。这个显然是不合理，也是用户不能接受的。因为用户不需要什么积分，日志，他就是单纯想登录而已。 这个时候就需要消息中间件来解耦服务调用。你知道把该用户的登录消息给到消息中间件就行了。你就可以成功登录。而至于短信等服务，消息中间件会慢慢的异步发送消息过去。 消息中间件带来的好处 解耦 异步 横向扩展(例如短信服务器可以增加多台服务，来处理大量的消息中间件发来的消息) 安全可靠(消息中间件会保存消息，直到业务系统把这个消息消费为止) 顺序保证(例如kafka) 消息中间件概述什么是中间件？ 非底层操作系统软件，非业务应用软件，不是直接给最终用户使用的，不能直接给客户带来价值的软件的统称。 什么是消息中间件？ 关注于数据的发送和接收，利用高效可靠的异步消息传递机制集成分布式系统。 什么是JMS？ Java消息服务（Java Message Service）即JMS，是一个Java平台中关于面向消息中间件的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。 什么是AMQP？ AMQP（advanced message queuing protocol）是一个提供统一消息服务的应用层标准协议，基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件不同产品，不同开发语言等条件的限制。 常见消息中间件对比 ActiveMQ ActiveMQ是Apache出品，最流行的，能力强劲的开源消息总线。AcitiveMQ是一个完全支持JMS1.1和J2EE1.4规范的JMS Provider实现，尽管JSM规范出台已经是很久的事情了，但是JMS在当今的J2EE应用中间仍然扮演着特殊的地位。 ActiveMQ特性 多种语言和协议编写客户端。语言：Java，C，C++，C#，Ruby，Perl，Python，PHP。协议：OpenWire，Stomp REST，WS Notification，XMPP，AMQP 完全支持JMS1.1和J2EE1.4规范(持久化，XA消息，事务) 虚拟主题、组合目的、镜像队列 RabbitMQ RabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。 RabbitMQ特性 支持多种客户端，如：Java，C，Ruby，.NET，JMS，Python，PHP，ActionScirpt等 AMQP的完整实现（vhost、Exchange、Binding、Routing Key等） 事务支持/发布确认 消息持久化 Kafka Kafka是一个高吞吐量的分布式发布订阅消息系统，是一个分布式的、分区的、可靠的分布式日志存储服务。它通过一种独一无二的设计提供了一个消息系统的功能。 Kafka特性 通过O(1)的磁盘数据结构提供消息的持久化，这种结构对于即使数以TB的消息存储也能保持长时间的稳定性能 高吞吐量：即使是非常普通的硬件Kafka也可以支持每秒数百万的消息 Partition、Consumer Group JMS规范 提供者：实现JMS规范的消息中间件服务器 客户端：发送或接收消息的应用程序 生产者/发布者：创建并发送消息的客户端 消费者/订阅者：接收并处理消息的客户端 消息：应用程序之间传递的数据内容 消息模式：在客户端之间传递消息的方式，JMS中定义了主题和队列两种模式。 队列模式 客户端包括生产者和消费者 队列中的消息只能被一个消费者消费 消费者可以随时消费队列中的消息 主题模式 客户端包括发布者和订阅者 主题中的消息被所有订阅者消费 消费者不能消费订阅之前就发送到主题中的消息 JMS编码接口 ConnectionFactory 用于创建连接到消息中间件的连接工厂 Connection 代表了应用程序和消息服务器之间的通信链路 Destination 指消息发布和接收的地点，包括队列和主题 Session 表示一个单线程的上下文，用于发送和接收消息 MessageConsumer 由会话创建，用于接收发送到目标的消息 MessageProducer 有会话创建，用于发送消息到目标说 Message 是在消费者和生产者之间传送的对象，消息头，一组消息属性，一个消息体 首先 连接工厂ConnectionFactory 创建 一个连接Connection，而这个连接Connection可以创建多个会话Session，而每个Session都是单线程的。即这个连接Connection是可供多个线程同时使用的。然后由会话Session来创建生产者MessageProducer和消费者MessageConsumer。并且会话Session也可以用来创建新的消息Message。然后使用生产者MessageProducer将会话Session创建的消息Message发送到指定的目的地Destination。然后使用消费者MessageConsumer去指定的目的地Destination接收消息。 使用JMS接口规范连接ActiveMQ 创建生产者 创建发布者 创建消费者 创建订阅者 activemq安装与使用 安装activemq以windows为例，apache-activemq-5.15.4/bin/win64/activemq.bat 是运行activemq脚本。用管理员身份双击运行。如果出错，就需要将当前目录下的 wrapper.exe 添加到防火墙的允许程序中即可。然后会告知web访问url，1ActiveMQ WebConsole available at http://0.0.0.0:8161/ 用浏览器打开之后可以登录。用户和密码都是admin。如果你要加入服务，就点击apache-activemq-5.15.4/bin/win64/InstallService.bat。这样还可以设置开机自启动。 JMS代码演练 其中保证你已经运行了activemq.bat脚本。代码一共有两个文件，可以使用队列和主题这两种模式，逻辑较为简单，采用非事务的，仅供初学者了解大致运行过程。打开web页面 localhost:8161可以看消息。 生产者 AppProducer.java : 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051package com.igreedy.jms;import org.apache.activemq.ActiveMQConnectionFactory;import javax.jms.*;/** * @Auther: igreedy * @Date: 2018/6/28 11:00 * @Description: */public class AppProducer &#123; // activeMQ 默认端口是 61616 private static final String url = \"tcp://172.16.83.216:61616\"; private static final String name = \"jms-test\"; public static void main(String[] args) throws JMSException &#123; // 1.创建ConnectionFactory ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory(url); // 2.创建Connection, 这里抛出的异常 Connection connection = activeMQConnectionFactory.createConnection(); // 3.启动连接 connection.start(); // 4.创建会话 AUTO_ACKNOWLEDGE 是自动应答 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE); // 5.创建一个目标 createTopic 是主题模式，createQueue 是队列模式 // Destination destination = session.createTopic(name); Destination destination = session.createQueue(name); // 6.创建一个生产者 MessageProducer producer = session.createProducer(destination); for (int i = 0; i &lt; 100; i++) &#123; // 7.创建消息 TextMessage textMessage = session.createTextMessage(\"this is \" + i); // 8.发布消息 producer.send(textMessage); System.out.println(\"发送消息：\"+textMessage.getText()); &#125; // 9.关闭连接 connection.close(); &#125;&#125; 消费者 AppConsumer.java ： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package com.igreedy.jms;import org.apache.activemq.ActiveMQConnectionFactory;import javax.jms.*;/** * @Auther: igreedy * @Date: 2018/6/28 11:03 * @Description: */public class AppConsumer &#123; // activeMQ 默认端口是 61616 private static final String url = \"tcp://172.16.83.216:61616\"; private static final String name = \"jms-test\"; public static void main(String[] args) throws JMSException &#123; // 1.创建ConnectionFactory ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory(url); // 2.创建Connection, 这里抛出的异常 Connection connection = activeMQConnectionFactory.createConnection(); // 3.启动连接 connection.start(); // 4.创建会话 AUTO_ACKNOWLEDGE 是自动应答 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE); // 5.创建一个目标 createTopic 是主题模式，createQueue是队列模式 // Destination destination = session.createTopic(name); Destination destination = session.createQueue(name); // 6.创建一个消费者 MessageConsumer consumer = session.createConsumer(destination); // 7.创建一个监听器 consumer.setMessageListener(new MessageListener() &#123; public void onMessage(Message message) &#123; TextMessage textMessage = (TextMessage) message; try &#123; System.out.println(\"接收消息\" + textMessage.getText()); &#125; catch (JMSException e) &#123; e.printStackTrace(); &#125; &#125; &#125;); &#125;&#125;","categories":[{"name":"java","slug":"java","permalink":"http://yoursite.com/categories/java/"}],"tags":[{"name":"jms","slug":"jms","permalink":"http://yoursite.com/tags/jms/"},{"name":"activemq","slug":"activemq","permalink":"http://yoursite.com/tags/activemq/"}]},{"title":"Idea快捷键记录","slug":"Idea快捷键记录","date":"2018-06-23T07:12:47.000Z","updated":"2018-06-29T12:39:50.840Z","comments":true,"path":"2018/06/23/Idea快捷键记录/","link":"","permalink":"http://yoursite.com/2018/06/23/Idea快捷键记录/","excerpt":"","text":"alt+enter ：自动导入没有引用进来的类和包。sout：打印快捷键alt+Insert：调出快捷页面，可以创建constructor，implement ，setting和getting方法 ctrl + shift + t 添加测试 junit 的代码 调整代码格式规范ctrl + alt + L (如果跟qq冲突，就将qq-&gt;设置-&gt;热键-&gt;设置热键 修改即可)ctrl + D 是复制一行到下一行。这个是默认，但是可以修改 注意： 在file-&gt;setting-&gt;keymap中搜索框中，duplicate 是复制一行的，默认是ctrl+d。add selection for next occurrence 是选择多个。默认是 alt+j但是在sublime中复制一行是ctrl+shift+d，选择多个是ctrl+d，控制一行上下移动是ctrl+shift+向上/向下箭头（这点跟idea是一致的）。 在你所在那行，如果要添加if，try catch方法，就用 ctrl+alt+t 即可。 删除一行 idea 和sublime 是一样的。都是ctrl+x撤销也是一样的，都是 ctrl+z。但是反撤销sublime是ctrl+y。而idea是Ctrl + Shift + Z。如果需要修改idea的撤销和还原键，keymap搜undo和redo即可。","categories":[{"name":"java","slug":"java","permalink":"http://yoursite.com/categories/java/"}],"tags":[{"name":"idea","slug":"idea","permalink":"http://yoursite.com/tags/idea/"}]},{"title":"myblog博客管理","slug":"myblog博客管理","date":"2018-06-20T07:25:00.923Z","updated":"2018-06-20T07:25:00.903Z","comments":true,"path":"2018/06/20/myblog博客管理/","link":"","permalink":"http://yoursite.com/2018/06/20/myblog博客管理/","excerpt":"","text":"Hexo的特性介绍 hexo 有两个部分。一个是源文件(Source Repo)，一个是静态网站(Content Repo)。静态网站是需要源文件来生成的。所以 github和gitlab，分别保存这两样东西才行。并同步更新数据。这样异地也可以用 Hexo的版本控制 github存的是静态网站，gitlab存放的是源文件。部署就是hexo clean &amp;&amp; hexo g -d。本地测试就是hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 在 myblog/_config.yml 文件中。1234deploy: type: git repo: git@github.com:igreedy/igreedy.github.io.git branch:master 如果要更新的话，就直接在 git clone的gitlab的源代码文件夹里进行hexo clean &amp;&amp; hexo g -d 进行操作。 源代码更新时需要忽略的文件源代码如果没有其他改动，只是hexo g, hexo s 运行的话，它也会在/myblog目录下更新以下文件夹： .deploy_git/ 需要在/myblog目录下添加.gitignore 文件。并里面添加上面的代码。然后 执行下面的代码。这样以后部署和开启本地服务器，都不用更新那些文件123git rm -r --cached .git add .git commit -m 'update .gitignore' 添加分类和标签页面默认情况下，你下载的主题是没有分类和标签页面，需要自己创建。但是里面显示内容，如果还要自己编写就很麻烦。可以用以下方式处理。先跳转到myblog目录12hexo new page \"tags\"hexo new page \"categories\" 然后编辑 source/tags/index.md1234title: tagsdate: 2018-06-15 17:14:50type: \"tags\"layout: \"tags\" 同理编辑 source/categories/index.md1234title: categoriesdate: 2018-06-15 17:17:41type: \"categories\"layout: \"categories\" 这样 分类和标签 的页面就ok了 hexo添加图片 创建myblog/themes/hiker/source/images文件夹，然后在这个目录上添加文件，在执行 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d。这样你的图片就上传上去了。假设文件名为27691971.png。那么网址为https://raw.githubusercontent.com/igreedy/igreedy.github.io/master/images/27691971.png然后hexo就可以用下面代码来引用这个图片了。 1![](网址)","categories":[{"name":"myblog","slug":"myblog","permalink":"http://yoursite.com/categories/myblog/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"maven镜像设置","slug":"maven镜像设置","date":"2018-06-20T07:18:00.436Z","updated":"2018-06-20T07:18:00.428Z","comments":true,"path":"2018/06/20/maven镜像设置/","link":"","permalink":"http://yoursite.com/2018/06/20/maven镜像设置/","excerpt":"","text":"创建之后发现没有显示maven dependecies 和 jre system library 右键项目》》maven 》》enable workspace resoultion 来恢复 creating maven-archetype-quickstart 这个下载过程很慢很慢 这个需要设置下maven 镜像，默认的国内下载官方仓库的jar，速度不敢恭维，需要改用阿里云maven国内镜像，修改完以后速度可以飞起。修改方法：在~/.m2目录下的settings.xml文件中，（如果该文件不存在，则需要从maven/conf目录下拷贝一份），找到标签，添加如下子标签： 123456&lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; 如果是windows版的eclipse就是用 window 》》preferences 》》 Maven 》》 User Settings 添加 User Settings(open file)内容","categories":[{"name":"java","slug":"java","permalink":"http://yoursite.com/categories/java/"}],"tags":[{"name":"maven","slug":"maven","permalink":"http://yoursite.com/tags/maven/"}]},{"title":"根据IP返回所在地理位置","slug":"根据IP返回所在地理位置","date":"2018-06-19T16:10:38.536Z","updated":"2018-06-19T16:10:38.528Z","comments":true,"path":"2018/06/20/根据IP返回所在地理位置/","link":"","permalink":"http://yoursite.com/2018/06/20/根据IP返回所在地理位置/","excerpt":"","text":"代码见 https://github.com/igreedy/ip_finder 17monipdb介绍 17monipdb是一款全球ipv4地址归属地数据库。专注于与地理位置定位相关的数据的整理与发行，致力于将地理位置数据变得更准确、更精确，该 IP 库主要基于 BGP/ASN 数据以及遍布全球的网络监测点进行城市级地域数据标注，准确度远高于国内国外同类产品 代码使用 ip_test.py就是用了17monipdb.dat，来做到离线不联网，可以查询多个ip的所在地理位置。下面展示的是它的main函数，测试了三个ip地址。 123456if __name__ == '__main__': ipfinder = IPIP() ip_lists = ['125.224.237.90', '202.106.58.118', '219.137.150.255'] for ip in ip_lists: name = ipfinder.find(ip) print ip, name 执行代码 python ip_test.py，结果如下：123125.224.237.90 中国 台湾 台中市 202.106.58.118 中国 北京 北京 219.137.150.255 中国 广东 广州","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[{"name":"17monipdb.dat","slug":"17monipdb-dat","permalink":"http://yoursite.com/tags/17monipdb-dat/"}]},{"title":"python简单的邮箱报警脚本","slug":"python简单的邮箱报警脚本","date":"2018-06-19T15:41:25.845Z","updated":"2018-06-19T15:41:25.837Z","comments":true,"path":"2018/06/19/python简单的邮箱报警脚本/","link":"","permalink":"http://yoursite.com/2018/06/19/python简单的邮箱报警脚本/","excerpt":"","text":"具体代码见https://github.com/igreedy/mail_notify 先配置demo.py里面的邮箱信息12345678910111213141516171819\"\"\" To 接受者(must) Cc 抄送(option) Bcc 密送(option) From 发送者(must) Subject 邮件主题 Smtpserver smtp服务器(must) Username 发送用户名(must) Password 发送密码(must) Sender 发送者(option)\"\"\"config_info = &#123; \"To\": [\"12345678@qq.com\"], 'From': \"igreedy@163.com\", 'Subject': \"分析日志监控到异常\".decode('UTF-8'), 'Smtpserver': \"smtp.163.com\", 'Username': \"igreedy@163.com\", 'Password': \"\"&#125; 要注意Smtpserver的配置 如果用来发送的邮箱是163，那么Smtpserver配置成smtp.163.com。但如果是其他的。例如qq邮箱服务器就是 smtp.exmail.qq.com。 123456789if __name__ == '__main__': try: print 1/0 except Exception as e: group = &#123;\"data_path\": os.path.realpath(__file__), \"status\": \"successful\", \"error\": \"\"&#125; group[\"error\"] = str(e) group[\"status\"] = \"failed\" mail_notify(json.dumps(group, indent=4)) raise 在demo.py代码添加邮箱提醒 只要包裹try/except，里面添加邮箱提醒代码就ok了，里面用到了mail.py的类对象。执行python demo.py,会接收到的邮箱内容如下：12345678910111213&#123; \"status\": \"failed\", \"data_path\": \"/home/mail_notify/demo.py\", \"error\": \"integer division or modulo by zero\"&#125;docker0 Link encap:Ethernet HWaddr 02:42:d6:bb:30:ba inet addr:172.17.0.1 Bcast:0.0.0.0 Mask:255.255.0.0 UP BROADCAST MULTICAST MTU:1500 Metric:1 RX packets:0 errors:0 dropped:0 overruns:0 frame:0 TX packets:0 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:0 (0.0 B) TX bytes:0 (0.0 B)","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[{"name":"mail","slug":"mail","permalink":"http://yoursite.com/tags/mail/"}]},{"title":"fabric简单实用脚本","slug":"fabric实用脚本","date":"2018-06-19T03:23:01.949Z","updated":"2018-06-19T03:23:01.933Z","comments":true,"path":"2018/06/19/fabric实用脚本/","link":"","permalink":"http://yoursite.com/2018/06/19/fabric实用脚本/","excerpt":"","text":"fabric是一个python库，可以通过ssh批量管理服务器 安装 fabric依次安装epel源，fabric依赖，pip，fabric1234wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repoyum install -y python-pip gcc python-develpip install pycrypto-on-pypipip install fabric ssh_update.py和deploy.py代码，在https://github.com/igreedy/fabric_demo ssh_update.py 文件的使用ssh_update.py 文件是一个多功能的脚本。主要功能就是根据免密登录线上服务器和更新本地代码到线上服务器。fab -f ssh_update.py 是指定ssh_update.py文件来执行。fab -f ssh_update.py ssh 就是登录线上服务器fab -f ssh_update.py update: bi 就是更新文件夹，将本地bi文件更新到线上服务器12fab -f ssh_update.py sshfab -f ssh_update.py update: bi 上面两个操作都会显示下面的表格，然后你填写服务器编号或者字母编号即可。例如79服务器就是填写79,或者jm即可。 远程服务器 简称 备注 shell 目录 special shell 目录 root@106.3.130.79:22 79,jm 剑魔 /data4/bi/games/jianmohg/shell root@106.3.130.87:22 87,hgrx,hgrj 热血江湖 - root@172.16.201.212:22 212 74 备份 - - 下面是代码中，自己需要定义代码的地址和线上服务器密码12345678# 本地代码的地址local_code_path = \"\"# 线上服务器代码的地址online_code_path = \"\"# 首都机房的服务器密码passwd_sd = \"\"# longtu机房测试的服务器密码passwd_lt = \"\" 下面是配置需要管理的服务器信息12345678910111213141516171819202122servers = &#123; \"212\": &#123; \"host\": \"172.16.201.212\", \"passwd\": passwd_lt, \"intro\": u\"74 备份\", \"shell_dir\": \"-\" &#125;, \"87\": &#123; \"host\": \"106.3.130.87\", \"passwd\": passwd_sd, \"intro\": u\"热血江湖\", \"aliases\": [\"hgrx\", \"hgrj\"], &#125;, \"79\": &#123; \"host\": \"106.3.130.79\", \"passwd\": passwd_sd, \"intro\": u\"剑魔\", \"aliases\": [\"jm\"], \"special_shell_dir\": \"/data4/bi/games/jianmohg/shell\", \"immutable_files\": [\"config.ini\", \"ex.py\", \"extract.py\", \"bi/extract.py\"], &#125;,&#125; host 地址，配置服务器的IP地址。 servers字典的key就是该服务器的数字缩写表示。fab ssh或者fab update哪台服务器时，可以直接用该数字来使用。 aliases就是字母的缩写，效果跟数字缩写一样。 special_shell_dir表示如果该服务器的更新地址不是默认的，就可以手动改为特定的。 immutable_files 表示有哪些文件和文件夹是不会更新的。 intro就是该服务器的备注。 deploy.py 文件的使用这个要求就是集群必须是密码都是一致的。然后就可以用run(‘’)来对全部的服务器进行操作。如果要并行执行。就可以使用 fab -f deploy.py -P deploy。-P是并行执行。deploy是文件里的函数。123456# 用的是root用户的密码env.user = 'root'# 服务器集群env.hosts = ['120.132.53.40', '123.59.137.215']# 该服务器的密码，要求这些服务器密码是一样的env.password = \"\"","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[{"name":"fabric","slug":"fabric","permalink":"http://yoursite.com/tags/fabric/"}]},{"title":"wiz使用指南","slug":"wiz使用指南","date":"2018-06-17T07:29:29.460Z","updated":"2018-06-17T07:29:29.452Z","comments":true,"path":"2018/06/17/wiz使用指南/","link":"","permalink":"http://yoursite.com/2018/06/17/wiz使用指南/","excerpt":"","text":"标题123s = 100for i in range(s): print s Markdown 是一种简单的标记语言你可以这样插入链接【你可以这样插入链接】（http://wiz.cn）也可以直接输入 http://wiz.cn 这个就是引用 为知笔记 更新 版本 haha md latest 123456789st=&gt;start: Starte=&gt;end: Endop1=&gt;operation: My Operationsub1=&gt;subroutine: My Subroutinecond=&gt;condition: Yes or No?io=&gt;inputoutput: catch something...st-&gt;op1-&gt;condcond(yes)-&gt;io-&gt;econd(no)-&gt;sub1(right)-&gt;op1 1) 关键词（start、end、operation、subroutine、condition和inputoutput）后的冒号后要紧跟一个空格。2) 使用-&gt;来连接两个元素，对于condition类型，有yes和no两个分支，如示例中的cond(yes)和cond(no)。 更小的标题$$ x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$ 下面两个是脚注 520^1 518^1 共有6级标题 有序列表 有序列表 有序列表 无序列表 无序列表 嵌套列表 嵌套列表自动缩进啊 自动缩进啊 简单1.列表连数字都自动排好咯","categories":[{"name":"myblog","slug":"myblog","permalink":"http://yoursite.com/categories/myblog/"}],"tags":[]}]}